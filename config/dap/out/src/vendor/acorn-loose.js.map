{
  "version": 3,
  "sources": ["../../../node_modules/acorn-loose/dist/acorn-loose.js"],
  "sourcesContent": ["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('acorn')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'acorn'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.acorn = global.acorn || {}, global.acorn.loose = {}), global.acorn));\n})(this, (function (exports, acorn) { 'use strict';\n\n  var dummyValue = \"\u2716\";\n\n  function isDummy(node) { return node.name === dummyValue }\n\n  function noop() {}\n\n  var LooseParser = function LooseParser(input, options) {\n    if ( options === void 0 ) options = {};\n\n    this.toks = this.constructor.BaseParser.tokenizer(input, options);\n    this.options = this.toks.options;\n    this.input = this.toks.input;\n    this.tok = this.last = {type: acorn.tokTypes.eof, start: 0, end: 0};\n    this.tok.validateRegExpFlags = noop;\n    this.tok.validateRegExpPattern = noop;\n    if (this.options.locations) {\n      var here = this.toks.curPosition();\n      this.tok.loc = new acorn.SourceLocation(this.toks, here, here);\n    }\n    this.ahead = []; // Tokens ahead\n    this.context = []; // Indentation contexted\n    this.curIndent = 0;\n    this.curLineStart = 0;\n    this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n    this.inAsync = false;\n    this.inGenerator = false;\n    this.inFunction = false;\n  };\n\n  LooseParser.prototype.startNode = function startNode () {\n    return new acorn.Node(this.toks, this.tok.start, this.options.locations ? this.tok.loc.start : null)\n  };\n\n  LooseParser.prototype.storeCurrentPos = function storeCurrentPos () {\n    return this.options.locations ? [this.tok.start, this.tok.loc.start] : this.tok.start\n  };\n\n  LooseParser.prototype.startNodeAt = function startNodeAt (pos) {\n    if (this.options.locations) {\n      return new acorn.Node(this.toks, pos[0], pos[1])\n    } else {\n      return new acorn.Node(this.toks, pos)\n    }\n  };\n\n  LooseParser.prototype.finishNode = function finishNode (node, type) {\n    node.type = type;\n    node.end = this.last.end;\n    if (this.options.locations)\n      { node.loc.end = this.last.loc.end; }\n    if (this.options.ranges)\n      { node.range[1] = this.last.end; }\n    return node\n  };\n\n  LooseParser.prototype.dummyNode = function dummyNode (type) {\n    var dummy = this.startNode();\n    dummy.type = type;\n    dummy.end = dummy.start;\n    if (this.options.locations)\n      { dummy.loc.end = dummy.loc.start; }\n    if (this.options.ranges)\n      { dummy.range[1] = dummy.start; }\n    this.last = {type: acorn.tokTypes.name, start: dummy.start, end: dummy.start, loc: dummy.loc};\n    return dummy\n  };\n\n  LooseParser.prototype.dummyIdent = function dummyIdent () {\n    var dummy = this.dummyNode(\"Identifier\");\n    dummy.name = dummyValue;\n    return dummy\n  };\n\n  LooseParser.prototype.dummyString = function dummyString () {\n    var dummy = this.dummyNode(\"Literal\");\n    dummy.value = dummy.raw = dummyValue;\n    return dummy\n  };\n\n  LooseParser.prototype.eat = function eat (type) {\n    if (this.tok.type === type) {\n      this.next();\n      return true\n    } else {\n      return false\n    }\n  };\n\n  LooseParser.prototype.isContextual = function isContextual (name) {\n    return this.tok.type === acorn.tokTypes.name && this.tok.value === name\n  };\n\n  LooseParser.prototype.eatContextual = function eatContextual (name) {\n    return this.tok.value === name && this.eat(acorn.tokTypes.name)\n  };\n\n  LooseParser.prototype.canInsertSemicolon = function canInsertSemicolon () {\n    return this.tok.type === acorn.tokTypes.eof || this.tok.type === acorn.tokTypes.braceR ||\n      acorn.lineBreak.test(this.input.slice(this.last.end, this.tok.start))\n  };\n\n  LooseParser.prototype.semicolon = function semicolon () {\n    return this.eat(acorn.tokTypes.semi)\n  };\n\n  LooseParser.prototype.expect = function expect (type) {\n    if (this.eat(type)) { return true }\n    for (var i = 1; i <= 2; i++) {\n      if (this.lookAhead(i).type === type) {\n        for (var j = 0; j < i; j++) { this.next(); }\n        return true\n      }\n    }\n  };\n\n  LooseParser.prototype.pushCx = function pushCx () {\n    this.context.push(this.curIndent);\n  };\n\n  LooseParser.prototype.popCx = function popCx () {\n    this.curIndent = this.context.pop();\n  };\n\n  LooseParser.prototype.lineEnd = function lineEnd (pos) {\n    while (pos < this.input.length && !acorn.isNewLine(this.input.charCodeAt(pos))) { ++pos; }\n    return pos\n  };\n\n  LooseParser.prototype.indentationAfter = function indentationAfter (pos) {\n    for (var count = 0;; ++pos) {\n      var ch = this.input.charCodeAt(pos);\n      if (ch === 32) { ++count; }\n      else if (ch === 9) { count += this.options.tabSize; }\n      else { return count }\n    }\n  };\n\n  LooseParser.prototype.closes = function closes (closeTok, indent, line, blockHeuristic) {\n    if (this.tok.type === closeTok || this.tok.type === acorn.tokTypes.eof) { return true }\n    return line !== this.curLineStart && this.curIndent < indent && this.tokenStartsLine() &&\n      (!blockHeuristic || this.nextLineStart >= this.input.length ||\n       this.indentationAfter(this.nextLineStart) < indent)\n  };\n\n  LooseParser.prototype.tokenStartsLine = function tokenStartsLine () {\n    for (var p = this.tok.start - 1; p >= this.curLineStart; --p) {\n      var ch = this.input.charCodeAt(p);\n      if (ch !== 9 && ch !== 32) { return false }\n    }\n    return true\n  };\n\n  LooseParser.prototype.extend = function extend (name, f) {\n    this[name] = f(this[name]);\n  };\n\n  LooseParser.prototype.parse = function parse () {\n    this.next();\n    return this.parseTopLevel()\n  };\n\n  LooseParser.extend = function extend () {\n      var plugins = [], len = arguments.length;\n      while ( len-- ) plugins[ len ] = arguments[ len ];\n\n    var cls = this;\n    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n    return cls\n  };\n\n  LooseParser.parse = function parse (input, options) {\n    return new this(input, options).parse()\n  };\n\n  // Allows plugins to extend the base parser / tokenizer used\n  LooseParser.BaseParser = acorn.Parser;\n\n  var lp$2 = LooseParser.prototype;\n\n  function isSpace(ch) {\n    return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || acorn.isNewLine(ch)\n  }\n\n  lp$2.next = function() {\n    this.last = this.tok;\n    if (this.ahead.length)\n      { this.tok = this.ahead.shift(); }\n    else\n      { this.tok = this.readToken(); }\n\n    if (this.tok.start >= this.nextLineStart) {\n      while (this.tok.start >= this.nextLineStart) {\n        this.curLineStart = this.nextLineStart;\n        this.nextLineStart = this.lineEnd(this.curLineStart) + 1;\n      }\n      this.curIndent = this.indentationAfter(this.curLineStart);\n    }\n  };\n\n  lp$2.readToken = function() {\n    for (;;) {\n      try {\n        this.toks.next();\n        if (this.toks.type === acorn.tokTypes.dot &&\n            this.input.substr(this.toks.end, 1) === \".\" &&\n            this.options.ecmaVersion >= 6) {\n          this.toks.end++;\n          this.toks.type = acorn.tokTypes.ellipsis;\n        }\n        return new acorn.Token(this.toks)\n      } catch (e) {\n        if (!(e instanceof SyntaxError)) { throw e }\n\n        // Try to skip some text, based on the error message, and then continue\n        var msg = e.message, pos = e.raisedAt, replace = true;\n        if (/unterminated/i.test(msg)) {\n          pos = this.lineEnd(e.pos + 1);\n          if (/string/.test(msg)) {\n            replace = {start: e.pos, end: pos, type: acorn.tokTypes.string, value: this.input.slice(e.pos + 1, pos)};\n          } else if (/regular expr/i.test(msg)) {\n            var re = this.input.slice(e.pos, pos);\n            try { re = new RegExp(re); } catch (e$1) { /* ignore compilation error due to new syntax */ }\n            replace = {start: e.pos, end: pos, type: acorn.tokTypes.regexp, value: re};\n          } else if (/template/.test(msg)) {\n            replace = {\n              start: e.pos,\n              end: pos,\n              type: acorn.tokTypes.template,\n              value: this.input.slice(e.pos, pos)\n            };\n          } else {\n            replace = false;\n          }\n        } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n          while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) { ++pos; }\n        } else if (/character escape|expected hexadecimal/i.test(msg)) {\n          while (pos < this.input.length) {\n            var ch = this.input.charCodeAt(pos++);\n            if (ch === 34 || ch === 39 || acorn.isNewLine(ch)) { break }\n          }\n        } else if (/unexpected character/i.test(msg)) {\n          pos++;\n          replace = false;\n        } else if (/regular expression/i.test(msg)) {\n          replace = true;\n        } else {\n          throw e\n        }\n        this.resetTo(pos);\n        if (replace === true) { replace = {start: pos, end: pos, type: acorn.tokTypes.name, value: dummyValue}; }\n        if (replace) {\n          if (this.options.locations)\n            { replace.loc = new acorn.SourceLocation(\n              this.toks,\n              acorn.getLineInfo(this.input, replace.start),\n              acorn.getLineInfo(this.input, replace.end)); }\n          return replace\n        }\n      }\n    }\n  };\n\n  lp$2.resetTo = function(pos) {\n    this.toks.pos = pos;\n    this.toks.containsEsc = false;\n    var ch = this.input.charAt(pos - 1);\n    this.toks.exprAllowed = !ch || /[[{(,;:?/*=+\\-~!|&%^<>]/.test(ch) ||\n      /[enwfd]/.test(ch) &&\n      /\\b(case|else|return|throw|new|in|(instance|type)?of|delete|void)$/.test(this.input.slice(pos - 10, pos));\n\n    if (this.options.locations) {\n      this.toks.curLine = 1;\n      this.toks.lineStart = acorn.lineBreakG.lastIndex = 0;\n      var match;\n      while ((match = acorn.lineBreakG.exec(this.input)) && match.index < pos) {\n        ++this.toks.curLine;\n        this.toks.lineStart = match.index + match[0].length;\n      }\n    }\n  };\n\n  lp$2.lookAhead = function(n) {\n    while (n > this.ahead.length)\n      { this.ahead.push(this.readToken()); }\n    return this.ahead[n - 1]\n  };\n\n  var lp$1 = LooseParser.prototype;\n\n  lp$1.parseTopLevel = function() {\n    var node = this.startNodeAt(this.options.locations ? [0, acorn.getLineInfo(this.input, 0)] : 0);\n    node.body = [];\n    while (this.tok.type !== acorn.tokTypes.eof) { node.body.push(this.parseStatement()); }\n    this.toks.adaptDirectivePrologue(node.body);\n    this.last = this.tok;\n    node.sourceType = this.options.sourceType;\n    return this.finishNode(node, \"Program\")\n  };\n\n  lp$1.parseStatement = function() {\n    var starttype = this.tok.type, node = this.startNode(), kind;\n\n    if (this.toks.isLet()) {\n      starttype = acorn.tokTypes._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n    case acorn.tokTypes._break: case acorn.tokTypes._continue:\n      this.next();\n      var isBreak = starttype === acorn.tokTypes._break;\n      if (this.semicolon() || this.canInsertSemicolon()) {\n        node.label = null;\n      } else {\n        node.label = this.tok.type === acorn.tokTypes.name ? this.parseIdent() : null;\n        this.semicolon();\n      }\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n    case acorn.tokTypes._debugger:\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\")\n\n    case acorn.tokTypes._do:\n      this.next();\n      node.body = this.parseStatement();\n      node.test = this.eat(acorn.tokTypes._while) ? this.parseParenExpression() : this.dummyIdent();\n      this.semicolon();\n      return this.finishNode(node, \"DoWhileStatement\")\n\n    case acorn.tokTypes._for:\n      this.next(); // `for` keyword\n      var isAwait = this.options.ecmaVersion >= 9 && this.eatContextual(\"await\");\n\n      this.pushCx();\n      this.expect(acorn.tokTypes.parenL);\n      if (this.tok.type === acorn.tokTypes.semi) { return this.parseFor(node, null) }\n      var isLet = this.toks.isLet();\n      if (isLet || this.tok.type === acorn.tokTypes._var || this.tok.type === acorn.tokTypes._const) {\n        var init$1 = this.parseVar(this.startNode(), true, isLet ? \"let\" : this.tok.value);\n        if (init$1.declarations.length === 1 && (this.tok.type === acorn.tokTypes._in || this.isContextual(\"of\"))) {\n          if (this.options.ecmaVersion >= 9 && this.tok.type !== acorn.tokTypes._in) {\n            node.await = isAwait;\n          }\n          return this.parseForIn(node, init$1)\n        }\n        return this.parseFor(node, init$1)\n      }\n      var init = this.parseExpression(true);\n      if (this.tok.type === acorn.tokTypes._in || this.isContextual(\"of\")) {\n        if (this.options.ecmaVersion >= 9 && this.tok.type !== acorn.tokTypes._in) {\n          node.await = isAwait;\n        }\n        return this.parseForIn(node, this.toAssignable(init))\n      }\n      return this.parseFor(node, init)\n\n    case acorn.tokTypes._function:\n      this.next();\n      return this.parseFunction(node, true)\n\n    case acorn.tokTypes._if:\n      this.next();\n      node.test = this.parseParenExpression();\n      node.consequent = this.parseStatement();\n      node.alternate = this.eat(acorn.tokTypes._else) ? this.parseStatement() : null;\n      return this.finishNode(node, \"IfStatement\")\n\n    case acorn.tokTypes._return:\n      this.next();\n      if (this.eat(acorn.tokTypes.semi) || this.canInsertSemicolon()) { node.argument = null; }\n      else { node.argument = this.parseExpression(); this.semicolon(); }\n      return this.finishNode(node, \"ReturnStatement\")\n\n    case acorn.tokTypes._switch:\n      var blockIndent = this.curIndent, line = this.curLineStart;\n      this.next();\n      node.discriminant = this.parseParenExpression();\n      node.cases = [];\n      this.pushCx();\n      this.expect(acorn.tokTypes.braceL);\n\n      var cur;\n      while (!this.closes(acorn.tokTypes.braceR, blockIndent, line, true)) {\n        if (this.tok.type === acorn.tokTypes._case || this.tok.type === acorn.tokTypes._default) {\n          var isCase = this.tok.type === acorn.tokTypes._case;\n          if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n          node.cases.push(cur = this.startNode());\n          cur.consequent = [];\n          this.next();\n          if (isCase) { cur.test = this.parseExpression(); }\n          else { cur.test = null; }\n          this.expect(acorn.tokTypes.colon);\n        } else {\n          if (!cur) {\n            node.cases.push(cur = this.startNode());\n            cur.consequent = [];\n            cur.test = null;\n          }\n          cur.consequent.push(this.parseStatement());\n        }\n      }\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      this.popCx();\n      this.eat(acorn.tokTypes.braceR);\n      return this.finishNode(node, \"SwitchStatement\")\n\n    case acorn.tokTypes._throw:\n      this.next();\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\")\n\n    case acorn.tokTypes._try:\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n      if (this.tok.type === acorn.tokTypes._catch) {\n        var clause = this.startNode();\n        this.next();\n        if (this.eat(acorn.tokTypes.parenL)) {\n          clause.param = this.toAssignable(this.parseExprAtom(), true);\n          this.expect(acorn.tokTypes.parenR);\n        } else {\n          clause.param = null;\n        }\n        clause.body = this.parseBlock();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n      node.finalizer = this.eat(acorn.tokTypes._finally) ? this.parseBlock() : null;\n      if (!node.handler && !node.finalizer) { return node.block }\n      return this.finishNode(node, \"TryStatement\")\n\n    case acorn.tokTypes._var:\n    case acorn.tokTypes._const:\n      return this.parseVar(node, false, kind || this.tok.value)\n\n    case acorn.tokTypes._while:\n      this.next();\n      node.test = this.parseParenExpression();\n      node.body = this.parseStatement();\n      return this.finishNode(node, \"WhileStatement\")\n\n    case acorn.tokTypes._with:\n      this.next();\n      node.object = this.parseParenExpression();\n      node.body = this.parseStatement();\n      return this.finishNode(node, \"WithStatement\")\n\n    case acorn.tokTypes.braceL:\n      return this.parseBlock()\n\n    case acorn.tokTypes.semi:\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\")\n\n    case acorn.tokTypes._class:\n      return this.parseClass(true)\n\n    case acorn.tokTypes._import:\n      if (this.options.ecmaVersion > 10) {\n        var nextType = this.lookAhead(1).type;\n        if (nextType === acorn.tokTypes.parenL || nextType === acorn.tokTypes.dot) {\n          node.expression = this.parseExpression();\n          this.semicolon();\n          return this.finishNode(node, \"ExpressionStatement\")\n        }\n      }\n\n      return this.parseImport()\n\n    case acorn.tokTypes._export:\n      return this.parseExport()\n\n    default:\n      if (this.toks.isAsyncFunction()) {\n        this.next();\n        this.next();\n        return this.parseFunction(node, true, true)\n      }\n      var expr = this.parseExpression();\n      if (isDummy(expr)) {\n        this.next();\n        if (this.tok.type === acorn.tokTypes.eof) { return this.finishNode(node, \"EmptyStatement\") }\n        return this.parseStatement()\n      } else if (starttype === acorn.tokTypes.name && expr.type === \"Identifier\" && this.eat(acorn.tokTypes.colon)) {\n        node.body = this.parseStatement();\n        node.label = expr;\n        return this.finishNode(node, \"LabeledStatement\")\n      } else {\n        node.expression = expr;\n        this.semicolon();\n        return this.finishNode(node, \"ExpressionStatement\")\n      }\n    }\n  };\n\n  lp$1.parseBlock = function() {\n    var node = this.startNode();\n    this.pushCx();\n    this.expect(acorn.tokTypes.braceL);\n    var blockIndent = this.curIndent, line = this.curLineStart;\n    node.body = [];\n    while (!this.closes(acorn.tokTypes.braceR, blockIndent, line, true))\n      { node.body.push(this.parseStatement()); }\n    this.popCx();\n    this.eat(acorn.tokTypes.braceR);\n    return this.finishNode(node, \"BlockStatement\")\n  };\n\n  lp$1.parseFor = function(node, init) {\n    node.init = init;\n    node.test = node.update = null;\n    if (this.eat(acorn.tokTypes.semi) && this.tok.type !== acorn.tokTypes.semi) { node.test = this.parseExpression(); }\n    if (this.eat(acorn.tokTypes.semi) && this.tok.type !== acorn.tokTypes.parenR) { node.update = this.parseExpression(); }\n    this.popCx();\n    this.expect(acorn.tokTypes.parenR);\n    node.body = this.parseStatement();\n    return this.finishNode(node, \"ForStatement\")\n  };\n\n  lp$1.parseForIn = function(node, init) {\n    var type = this.tok.type === acorn.tokTypes._in ? \"ForInStatement\" : \"ForOfStatement\";\n    this.next();\n    node.left = init;\n    node.right = this.parseExpression();\n    this.popCx();\n    this.expect(acorn.tokTypes.parenR);\n    node.body = this.parseStatement();\n    return this.finishNode(node, type)\n  };\n\n  lp$1.parseVar = function(node, noIn, kind) {\n    node.kind = kind;\n    this.next();\n    node.declarations = [];\n    do {\n      var decl = this.startNode();\n      decl.id = this.options.ecmaVersion >= 6 ? this.toAssignable(this.parseExprAtom(), true) : this.parseIdent();\n      decl.init = this.eat(acorn.tokTypes.eq) ? this.parseMaybeAssign(noIn) : null;\n      node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    } while (this.eat(acorn.tokTypes.comma))\n    if (!node.declarations.length) {\n      var decl$1 = this.startNode();\n      decl$1.id = this.dummyIdent();\n      node.declarations.push(this.finishNode(decl$1, \"VariableDeclarator\"));\n    }\n    if (!noIn) { this.semicolon(); }\n    return this.finishNode(node, \"VariableDeclaration\")\n  };\n\n  lp$1.parseClass = function(isStatement) {\n    var node = this.startNode();\n    this.next();\n    if (this.tok.type === acorn.tokTypes.name) { node.id = this.parseIdent(); }\n    else if (isStatement === true) { node.id = this.dummyIdent(); }\n    else { node.id = null; }\n    node.superClass = this.eat(acorn.tokTypes._extends) ? this.parseExpression() : null;\n    node.body = this.startNode();\n    node.body.body = [];\n    this.pushCx();\n    var indent = this.curIndent + 1, line = this.curLineStart;\n    this.eat(acorn.tokTypes.braceL);\n    if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart; }\n    while (!this.closes(acorn.tokTypes.braceR, indent, line)) {\n      var element = this.parseClassElement();\n      if (element) { node.body.body.push(element); }\n    }\n    this.popCx();\n    if (!this.eat(acorn.tokTypes.braceR)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start;\n      if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n    }\n    this.semicolon();\n    this.finishNode(node.body, \"ClassBody\");\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  };\n\n  lp$1.parseClassElement = function() {\n    if (this.eat(acorn.tokTypes.semi)) { return null }\n\n    var ref = this.options;\n    var ecmaVersion = ref.ecmaVersion;\n    var locations = ref.locations;\n    var indent = this.curIndent;\n    var line = this.curLineStart;\n    var node = this.startNode();\n    var keyName = \"\";\n    var isGenerator = false;\n    var isAsync = false;\n    var kind = \"method\";\n    var isStatic = false;\n\n    if (this.eatContextual(\"static\")) {\n      // Parse static init block\n      if (ecmaVersion >= 13 && this.eat(acorn.tokTypes.braceL)) {\n        this.parseClassStaticBlock(node);\n        return node\n      }\n      if (this.isClassElementNameStart() || this.toks.type === acorn.tokTypes.star) {\n        isStatic = true;\n      } else {\n        keyName = \"static\";\n      }\n    }\n    node.static = isStatic;\n    if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n      if ((this.isClassElementNameStart() || this.toks.type === acorn.tokTypes.star) && !this.canInsertSemicolon()) {\n        isAsync = true;\n      } else {\n        keyName = \"async\";\n      }\n    }\n    if (!keyName) {\n      isGenerator = this.eat(acorn.tokTypes.star);\n      var lastValue = this.toks.value;\n      if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n        if (this.isClassElementNameStart()) {\n          kind = lastValue;\n        } else {\n          keyName = lastValue;\n        }\n      }\n    }\n\n    // Parse element name\n    if (keyName) {\n      // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n      // The last token is any of those. Make it the element name.\n      node.computed = false;\n      node.key = this.startNodeAt(locations ? [this.toks.lastTokStart, this.toks.lastTokStartLoc] : this.toks.lastTokStart);\n      node.key.name = keyName;\n      this.finishNode(node.key, \"Identifier\");\n    } else {\n      this.parseClassElementName(node);\n\n      // From https://github.com/acornjs/acorn/blob/7deba41118d6384a2c498c61176b3cf434f69590/acorn-loose/src/statement.js#L291\n      // Skip broken stuff.\n      if (isDummy(node.key)) {\n        if (isDummy(this.parseMaybeAssign())) { this.next(); }\n        this.eat(acorn.tokTypes.comma);\n        return null\n      }\n    }\n\n    // Parse element value\n    if (ecmaVersion < 13 || this.toks.type === acorn.tokTypes.parenL || kind !== \"method\" || isGenerator || isAsync) {\n      // Method\n      var isConstructor =\n        !node.computed &&\n        !node.static &&\n        !isGenerator &&\n        !isAsync &&\n        kind === \"method\" && (\n          node.key.type === \"Identifier\" && node.key.name === \"constructor\" ||\n          node.key.type === \"Literal\" && node.key.value === \"constructor\"\n        );\n      node.kind = isConstructor ? \"constructor\" : kind;\n      node.value = this.parseMethod(isGenerator, isAsync);\n      this.finishNode(node, \"MethodDefinition\");\n    } else {\n      // Field\n      if (this.eat(acorn.tokTypes.eq)) {\n        if (this.curLineStart !== line && this.curIndent <= indent && this.tokenStartsLine()) {\n          // Estimated the next line is the next class element by indentations.\n          node.value = null;\n        } else {\n          var oldInAsync = this.inAsync;\n          var oldInGenerator = this.inGenerator;\n          this.inAsync = false;\n          this.inGenerator = false;\n          node.value = this.parseMaybeAssign();\n          this.inAsync = oldInAsync;\n          this.inGenerator = oldInGenerator;\n        }\n      } else {\n        node.value = null;\n      }\n      this.semicolon();\n      this.finishNode(node, \"PropertyDefinition\");\n    }\n\n    return node\n  };\n\n  lp$1.parseClassStaticBlock = function(node) {\n    var blockIndent = this.curIndent, line = this.curLineStart;\n    node.body = [];\n    this.pushCx();\n    while (!this.closes(acorn.tokTypes.braceR, blockIndent, line, true))\n      { node.body.push(this.parseStatement()); }\n    this.popCx();\n    this.eat(acorn.tokTypes.braceR);\n\n    return this.finishNode(node, \"StaticBlock\")\n  };\n\n  lp$1.isClassElementNameStart = function() {\n    return this.toks.isClassElementNameStart()\n  };\n\n  lp$1.parseClassElementName = function(element) {\n    if (this.toks.type === acorn.tokTypes.privateId) {\n      element.computed = false;\n      element.key = this.parsePrivateIdent();\n    } else {\n      this.parsePropertyName(element);\n    }\n  };\n\n  lp$1.parseFunction = function(node, isStatement, isAsync) {\n    var oldInAsync = this.inAsync, oldInGenerator = this.inGenerator, oldInFunction = this.inFunction;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = this.eat(acorn.tokTypes.star);\n    }\n    if (this.options.ecmaVersion >= 8) {\n      node.async = !!isAsync;\n    }\n    if (this.tok.type === acorn.tokTypes.name) { node.id = this.parseIdent(); }\n    else if (isStatement === true) { node.id = this.dummyIdent(); }\n    this.inAsync = node.async;\n    this.inGenerator = node.generator;\n    this.inFunction = true;\n    node.params = this.parseFunctionParams();\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n    this.inAsync = oldInAsync;\n    this.inGenerator = oldInGenerator;\n    this.inFunction = oldInFunction;\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  };\n\n  lp$1.parseExport = function() {\n    var node = this.startNode();\n    this.next();\n    if (this.eat(acorn.tokTypes.star)) {\n      if (this.options.ecmaVersion >= 11) {\n        if (this.eatContextual(\"as\")) {\n          node.exported = this.parseExprAtom();\n        } else {\n          node.exported = null;\n        }\n      }\n      node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : this.dummyString();\n      this.semicolon();\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(acorn.tokTypes._default)) {\n      // export default (function foo() {}) // This is FunctionExpression.\n      var isAsync;\n      if (this.tok.type === acorn.tokTypes._function || (isAsync = this.toks.isAsyncFunction())) {\n        var fNode = this.startNode();\n        this.next();\n        if (isAsync) { this.next(); }\n        node.declaration = this.parseFunction(fNode, \"nullableID\", isAsync);\n      } else if (this.tok.type === acorn.tokTypes._class) {\n        node.declaration = this.parseClass(\"nullableID\");\n      } else {\n        node.declaration = this.parseMaybeAssign();\n        this.semicolon();\n      }\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    if (this.tok.type.keyword || this.toks.isLet() || this.toks.isAsyncFunction()) {\n      node.declaration = this.parseStatement();\n      node.specifiers = [];\n      node.source = null;\n    } else {\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifierList();\n      node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null;\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  };\n\n  lp$1.parseImport = function() {\n    var node = this.startNode();\n    this.next();\n    if (this.tok.type === acorn.tokTypes.string) {\n      node.specifiers = [];\n      node.source = this.parseExprAtom();\n    } else {\n      var elt;\n      if (this.tok.type === acorn.tokTypes.name && this.tok.value !== \"from\") {\n        elt = this.startNode();\n        elt.local = this.parseIdent();\n        this.finishNode(elt, \"ImportDefaultSpecifier\");\n        this.eat(acorn.tokTypes.comma);\n      }\n      node.specifiers = this.parseImportSpecifiers();\n      node.source = this.eatContextual(\"from\") && this.tok.type === acorn.tokTypes.string ? this.parseExprAtom() : this.dummyString();\n      if (elt) { node.specifiers.unshift(elt); }\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\")\n  };\n\n  lp$1.parseImportSpecifiers = function() {\n    var elts = [];\n    if (this.tok.type === acorn.tokTypes.star) {\n      var elt = this.startNode();\n      this.next();\n      elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent();\n      elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"));\n    } else {\n      var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart;\n      this.pushCx();\n      this.eat(acorn.tokTypes.braceL);\n      if (this.curLineStart > continuedLine) { continuedLine = this.curLineStart; }\n      while (!this.closes(acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n        var elt$1 = this.startNode();\n        if (this.eat(acorn.tokTypes.star)) {\n          elt$1.local = this.eatContextual(\"as\") ? this.parseModuleExportName() : this.dummyIdent();\n          this.finishNode(elt$1, \"ImportNamespaceSpecifier\");\n        } else {\n          if (this.isContextual(\"from\")) { break }\n          elt$1.imported = this.parseModuleExportName();\n          if (isDummy(elt$1.imported)) { break }\n          elt$1.local = this.eatContextual(\"as\") ? this.parseModuleExportName() : elt$1.imported;\n          this.finishNode(elt$1, \"ImportSpecifier\");\n        }\n        elts.push(elt$1);\n        this.eat(acorn.tokTypes.comma);\n      }\n      this.eat(acorn.tokTypes.braceR);\n      this.popCx();\n    }\n    return elts\n  };\n\n  lp$1.parseExportSpecifierList = function() {\n    var elts = [];\n    var indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart;\n    this.pushCx();\n    this.eat(acorn.tokTypes.braceL);\n    if (this.curLineStart > continuedLine) { continuedLine = this.curLineStart; }\n    while (!this.closes(acorn.tokTypes.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      if (this.isContextual(\"from\")) { break }\n      var elt = this.startNode();\n      elt.local = this.parseModuleExportName();\n      if (isDummy(elt.local)) { break }\n      elt.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : elt.local;\n      this.finishNode(elt, \"ExportSpecifier\");\n      elts.push(elt);\n      this.eat(acorn.tokTypes.comma);\n    }\n    this.eat(acorn.tokTypes.braceR);\n    this.popCx();\n    return elts\n  };\n\n  lp$1.parseModuleExportName = function() {\n    return this.options.ecmaVersion >= 13 && this.tok.type === acorn.tokTypes.string\n      ? this.parseExprAtom()\n      : this.parseIdent()\n  };\n\n  var lp = LooseParser.prototype;\n\n  lp.checkLVal = function(expr) {\n    if (!expr) { return expr }\n    switch (expr.type) {\n    case \"Identifier\":\n    case \"MemberExpression\":\n      return expr\n\n    case \"ParenthesizedExpression\":\n      expr.expression = this.checkLVal(expr.expression);\n      return expr\n\n    default:\n      return this.dummyIdent()\n    }\n  };\n\n  lp.parseExpression = function(noIn) {\n    var start = this.storeCurrentPos();\n    var expr = this.parseMaybeAssign(noIn);\n    if (this.tok.type === acorn.tokTypes.comma) {\n      var node = this.startNodeAt(start);\n      node.expressions = [expr];\n      while (this.eat(acorn.tokTypes.comma)) { node.expressions.push(this.parseMaybeAssign(noIn)); }\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  };\n\n  lp.parseParenExpression = function() {\n    this.pushCx();\n    this.expect(acorn.tokTypes.parenL);\n    var val = this.parseExpression();\n    this.popCx();\n    this.expect(acorn.tokTypes.parenR);\n    return val\n  };\n\n  lp.parseMaybeAssign = function(noIn) {\n    // `yield` should be an identifier reference if it's not in generator functions.\n    if (this.inGenerator && this.toks.isContextual(\"yield\")) {\n      var node = this.startNode();\n      this.next();\n      if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type !== acorn.tokTypes.star && !this.tok.type.startsExpr)) {\n        node.delegate = false;\n        node.argument = null;\n      } else {\n        node.delegate = this.eat(acorn.tokTypes.star);\n        node.argument = this.parseMaybeAssign();\n      }\n      return this.finishNode(node, \"YieldExpression\")\n    }\n\n    var start = this.storeCurrentPos();\n    var left = this.parseMaybeConditional(noIn);\n    if (this.tok.type.isAssign) {\n      var node$1 = this.startNodeAt(start);\n      node$1.operator = this.tok.value;\n      node$1.left = this.tok.type === acorn.tokTypes.eq ? this.toAssignable(left) : this.checkLVal(left);\n      this.next();\n      node$1.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node$1, \"AssignmentExpression\")\n    }\n    return left\n  };\n\n  lp.parseMaybeConditional = function(noIn) {\n    var start = this.storeCurrentPos();\n    var expr = this.parseExprOps(noIn);\n    if (this.eat(acorn.tokTypes.question)) {\n      var node = this.startNodeAt(start);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      node.alternate = this.expect(acorn.tokTypes.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent();\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  };\n\n  lp.parseExprOps = function(noIn) {\n    var start = this.storeCurrentPos();\n    var indent = this.curIndent, line = this.curLineStart;\n    return this.parseExprOp(this.parseMaybeUnary(false), start, -1, noIn, indent, line)\n  };\n\n  lp.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n    if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) { return left }\n    var prec = this.tok.type.binop;\n    if (prec != null && (!noIn || this.tok.type !== acorn.tokTypes._in)) {\n      if (prec > minPrec) {\n        var node = this.startNodeAt(start);\n        node.left = left;\n        node.operator = this.tok.value;\n        this.next();\n        if (this.curLineStart !== line && this.curIndent < indent && this.tokenStartsLine()) {\n          node.right = this.dummyIdent();\n        } else {\n          var rightStart = this.storeCurrentPos();\n          node.right = this.parseExprOp(this.parseMaybeUnary(false), rightStart, prec, noIn, indent, line);\n        }\n        this.finishNode(node, /&&|\\|\\||\\?\\?/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\");\n        return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n      }\n    }\n    return left\n  };\n\n  lp.parseMaybeUnary = function(sawUnary) {\n    var start = this.storeCurrentPos(), expr;\n    if (this.options.ecmaVersion >= 8 && this.toks.isContextual(\"await\") &&\n        (this.inAsync || (this.toks.inModule && this.options.ecmaVersion >= 13) ||\n         (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n      expr = this.parseAwait();\n      sawUnary = true;\n    } else if (this.tok.type.prefix) {\n      var node = this.startNode(), update = this.tok.type === acorn.tokTypes.incDec;\n      if (!update) { sawUnary = true; }\n      node.operator = this.tok.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(true);\n      if (update) { node.argument = this.checkLVal(node.argument); }\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else if (this.tok.type === acorn.tokTypes.ellipsis) {\n      var node$1 = this.startNode();\n      this.next();\n      node$1.argument = this.parseMaybeUnary(sawUnary);\n      expr = this.finishNode(node$1, \"SpreadElement\");\n    } else if (!sawUnary && this.tok.type === acorn.tokTypes.privateId) {\n      expr = this.parsePrivateIdent();\n    } else {\n      expr = this.parseExprSubscripts();\n      while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n        var node$2 = this.startNodeAt(start);\n        node$2.operator = this.tok.value;\n        node$2.prefix = false;\n        node$2.argument = this.checkLVal(expr);\n        this.next();\n        expr = this.finishNode(node$2, \"UpdateExpression\");\n      }\n    }\n\n    if (!sawUnary && this.eat(acorn.tokTypes.starstar)) {\n      var node$3 = this.startNodeAt(start);\n      node$3.operator = \"**\";\n      node$3.left = expr;\n      node$3.right = this.parseMaybeUnary(false);\n      return this.finishNode(node$3, \"BinaryExpression\")\n    }\n\n    return expr\n  };\n\n  lp.parseExprSubscripts = function() {\n    var start = this.storeCurrentPos();\n    return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n  };\n\n  lp.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n    var optionalSupported = this.options.ecmaVersion >= 11;\n    var optionalChained = false;\n    for (;;) {\n      if (this.curLineStart !== line && this.curIndent <= startIndent && this.tokenStartsLine()) {\n        if (this.tok.type === acorn.tokTypes.dot && this.curIndent === startIndent)\n          { --startIndent; }\n        else\n          { break }\n      }\n\n      var maybeAsyncArrow = base.type === \"Identifier\" && base.name === \"async\" && !this.canInsertSemicolon();\n      var optional = optionalSupported && this.eat(acorn.tokTypes.questionDot);\n      if (optional) {\n        optionalChained = true;\n      }\n\n      if ((optional && this.tok.type !== acorn.tokTypes.parenL && this.tok.type !== acorn.tokTypes.bracketL && this.tok.type !== acorn.tokTypes.backQuote) || this.eat(acorn.tokTypes.dot)) {\n        var node = this.startNodeAt(start);\n        node.object = base;\n        if (this.curLineStart !== line && this.curIndent <= startIndent && this.tokenStartsLine())\n          { node.property = this.dummyIdent(); }\n        else\n          { node.property = this.parsePropertyAccessor() || this.dummyIdent(); }\n        node.computed = false;\n        if (optionalSupported) {\n          node.optional = optional;\n        }\n        base = this.finishNode(node, \"MemberExpression\");\n      } else if (this.tok.type === acorn.tokTypes.bracketL) {\n        this.pushCx();\n        this.next();\n        var node$1 = this.startNodeAt(start);\n        node$1.object = base;\n        node$1.property = this.parseExpression();\n        node$1.computed = true;\n        if (optionalSupported) {\n          node$1.optional = optional;\n        }\n        this.popCx();\n        this.expect(acorn.tokTypes.bracketR);\n        base = this.finishNode(node$1, \"MemberExpression\");\n      } else if (!noCalls && this.tok.type === acorn.tokTypes.parenL) {\n        var exprList = this.parseExprList(acorn.tokTypes.parenR);\n        if (maybeAsyncArrow && this.eat(acorn.tokTypes.arrow))\n          { return this.parseArrowExpression(this.startNodeAt(start), exprList, true) }\n        var node$2 = this.startNodeAt(start);\n        node$2.callee = base;\n        node$2.arguments = exprList;\n        if (optionalSupported) {\n          node$2.optional = optional;\n        }\n        base = this.finishNode(node$2, \"CallExpression\");\n      } else if (this.tok.type === acorn.tokTypes.backQuote) {\n        var node$3 = this.startNodeAt(start);\n        node$3.tag = base;\n        node$3.quasi = this.parseTemplate();\n        base = this.finishNode(node$3, \"TaggedTemplateExpression\");\n      } else {\n        break\n      }\n    }\n\n    if (optionalChained) {\n      var chainNode = this.startNodeAt(start);\n      chainNode.expression = base;\n      base = this.finishNode(chainNode, \"ChainExpression\");\n    }\n    return base\n  };\n\n  lp.parseExprAtom = function() {\n    var node;\n    switch (this.tok.type) {\n    case acorn.tokTypes._this:\n    case acorn.tokTypes._super:\n      var type = this.tok.type === acorn.tokTypes._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type)\n\n    case acorn.tokTypes.name:\n      var start = this.storeCurrentPos();\n      var id = this.parseIdent();\n      var isAsync = false;\n      if (id.name === \"async\" && !this.canInsertSemicolon()) {\n        if (this.eat(acorn.tokTypes._function)) {\n          this.toks.overrideContext(acorn.tokContexts.f_expr);\n          return this.parseFunction(this.startNodeAt(start), false, true)\n        }\n        if (this.tok.type === acorn.tokTypes.name) {\n          id = this.parseIdent();\n          isAsync = true;\n        }\n      }\n      return this.eat(acorn.tokTypes.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id], isAsync) : id\n\n    case acorn.tokTypes.regexp:\n      node = this.startNode();\n      var val = this.tok.value;\n      node.regex = {pattern: val.pattern, flags: val.flags};\n      node.value = val.value;\n      node.raw = this.input.slice(this.tok.start, this.tok.end);\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case acorn.tokTypes.num: case acorn.tokTypes.string:\n      node = this.startNode();\n      node.value = this.tok.value;\n      node.raw = this.input.slice(this.tok.start, this.tok.end);\n      if (this.tok.type === acorn.tokTypes.num && node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case acorn.tokTypes._null: case acorn.tokTypes._true: case acorn.tokTypes._false:\n      node = this.startNode();\n      node.value = this.tok.type === acorn.tokTypes._null ? null : this.tok.type === acorn.tokTypes._true;\n      node.raw = this.tok.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case acorn.tokTypes.parenL:\n      var parenStart = this.storeCurrentPos();\n      this.next();\n      var inner = this.parseExpression();\n      this.expect(acorn.tokTypes.parenR);\n      if (this.eat(acorn.tokTypes.arrow)) {\n        // (a,)=>a // SequenceExpression makes dummy in the last hole. Drop the dummy.\n        var params = inner.expressions || [inner];\n        if (params.length && isDummy(params[params.length - 1]))\n          { params.pop(); }\n        return this.parseArrowExpression(this.startNodeAt(parenStart), params)\n      }\n      if (this.options.preserveParens) {\n        var par = this.startNodeAt(parenStart);\n        par.expression = inner;\n        inner = this.finishNode(par, \"ParenthesizedExpression\");\n      }\n      return inner\n\n    case acorn.tokTypes.bracketL:\n      node = this.startNode();\n      node.elements = this.parseExprList(acorn.tokTypes.bracketR, true);\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case acorn.tokTypes.braceL:\n      this.toks.overrideContext(acorn.tokContexts.b_expr);\n      return this.parseObj()\n\n    case acorn.tokTypes._class:\n      return this.parseClass(false)\n\n    case acorn.tokTypes._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false)\n\n    case acorn.tokTypes._new:\n      return this.parseNew()\n\n    case acorn.tokTypes.backQuote:\n      return this.parseTemplate()\n\n    case acorn.tokTypes._import:\n      if (this.options.ecmaVersion >= 11) {\n        return this.parseExprImport()\n      } else {\n        return this.dummyIdent()\n      }\n\n    default:\n      return this.dummyIdent()\n    }\n  };\n\n  lp.parseExprImport = function() {\n    var node = this.startNode();\n    var meta = this.parseIdent(true);\n    switch (this.tok.type) {\n    case acorn.tokTypes.parenL:\n      return this.parseDynamicImport(node)\n    case acorn.tokTypes.dot:\n      node.meta = meta;\n      return this.parseImportMeta(node)\n    default:\n      node.name = \"import\";\n      return this.finishNode(node, \"Identifier\")\n    }\n  };\n\n  lp.parseDynamicImport = function(node) {\n    node.source = this.parseExprList(acorn.tokTypes.parenR)[0] || this.dummyString();\n    return this.finishNode(node, \"ImportExpression\")\n  };\n\n  lp.parseImportMeta = function(node) {\n    this.next(); // skip '.'\n    node.property = this.parseIdent(true);\n    return this.finishNode(node, \"MetaProperty\")\n  };\n\n  lp.parseNew = function() {\n    var node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart;\n    var meta = this.parseIdent(true);\n    if (this.options.ecmaVersion >= 6 && this.eat(acorn.tokTypes.dot)) {\n      node.meta = meta;\n      node.property = this.parseIdent(true);\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var start = this.storeCurrentPos();\n    node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line);\n    if (this.tok.type === acorn.tokTypes.parenL) {\n      node.arguments = this.parseExprList(acorn.tokTypes.parenR);\n    } else {\n      node.arguments = [];\n    }\n    return this.finishNode(node, \"NewExpression\")\n  };\n\n  lp.parseTemplateElement = function() {\n    var elem = this.startNode();\n\n    // The loose parser accepts invalid unicode escapes even in untagged templates.\n    if (this.tok.type === acorn.tokTypes.invalidTemplate) {\n      elem.value = {\n        raw: this.tok.value,\n        cooked: null\n      };\n    } else {\n      elem.value = {\n        raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.tok.value\n      };\n    }\n    this.next();\n    elem.tail = this.tok.type === acorn.tokTypes.backQuote;\n    return this.finishNode(elem, \"TemplateElement\")\n  };\n\n  lp.parseTemplate = function() {\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement();\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.next();\n      node.expressions.push(this.parseExpression());\n      if (this.expect(acorn.tokTypes.braceR)) {\n        curElt = this.parseTemplateElement();\n      } else {\n        curElt = this.startNode();\n        curElt.value = {cooked: \"\", raw: \"\"};\n        curElt.tail = true;\n        this.finishNode(curElt, \"TemplateElement\");\n      }\n      node.quasis.push(curElt);\n    }\n    this.expect(acorn.tokTypes.backQuote);\n    return this.finishNode(node, \"TemplateLiteral\")\n  };\n\n  lp.parseObj = function() {\n    var node = this.startNode();\n    node.properties = [];\n    this.pushCx();\n    var indent = this.curIndent + 1, line = this.curLineStart;\n    this.eat(acorn.tokTypes.braceL);\n    if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart; }\n    while (!this.closes(acorn.tokTypes.braceR, indent, line)) {\n      var prop = this.startNode(), isGenerator = (void 0), isAsync = (void 0), start = (void 0);\n      if (this.options.ecmaVersion >= 9 && this.eat(acorn.tokTypes.ellipsis)) {\n        prop.argument = this.parseMaybeAssign();\n        node.properties.push(this.finishNode(prop, \"SpreadElement\"));\n        this.eat(acorn.tokTypes.comma);\n        continue\n      }\n      if (this.options.ecmaVersion >= 6) {\n        start = this.storeCurrentPos();\n        prop.method = false;\n        prop.shorthand = false;\n        isGenerator = this.eat(acorn.tokTypes.star);\n      }\n      this.parsePropertyName(prop);\n      if (this.toks.isAsyncProp(prop)) {\n        isAsync = true;\n        isGenerator = this.options.ecmaVersion >= 9 && this.eat(acorn.tokTypes.star);\n        this.parsePropertyName(prop);\n      } else {\n        isAsync = false;\n      }\n      if (isDummy(prop.key)) { if (isDummy(this.parseMaybeAssign())) { this.next(); } this.eat(acorn.tokTypes.comma); continue }\n      if (this.eat(acorn.tokTypes.colon)) {\n        prop.kind = \"init\";\n        prop.value = this.parseMaybeAssign();\n      } else if (this.options.ecmaVersion >= 6 && (this.tok.type === acorn.tokTypes.parenL || this.tok.type === acorn.tokTypes.braceL)) {\n        prop.kind = \"init\";\n        prop.method = true;\n        prop.value = this.parseMethod(isGenerator, isAsync);\n      } else if (this.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n                 !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n                 (this.tok.type !== acorn.tokTypes.comma && this.tok.type !== acorn.tokTypes.braceR && this.tok.type !== acorn.tokTypes.eq)) {\n        prop.kind = prop.key.name;\n        this.parsePropertyName(prop);\n        prop.value = this.parseMethod(false);\n      } else {\n        prop.kind = \"init\";\n        if (this.options.ecmaVersion >= 6) {\n          if (this.eat(acorn.tokTypes.eq)) {\n            var assign = this.startNodeAt(start);\n            assign.operator = \"=\";\n            assign.left = prop.key;\n            assign.right = this.parseMaybeAssign();\n            prop.value = this.finishNode(assign, \"AssignmentExpression\");\n          } else {\n            prop.value = prop.key;\n          }\n        } else {\n          prop.value = this.dummyIdent();\n        }\n        prop.shorthand = true;\n      }\n      node.properties.push(this.finishNode(prop, \"Property\"));\n      this.eat(acorn.tokTypes.comma);\n    }\n    this.popCx();\n    if (!this.eat(acorn.tokTypes.braceR)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start;\n      if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n    }\n    return this.finishNode(node, \"ObjectExpression\")\n  };\n\n  lp.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(acorn.tokTypes.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseExpression();\n        this.expect(acorn.tokTypes.bracketR);\n        return\n      } else {\n        prop.computed = false;\n      }\n    }\n    var key = (this.tok.type === acorn.tokTypes.num || this.tok.type === acorn.tokTypes.string) ? this.parseExprAtom() : this.parseIdent();\n    prop.key = key || this.dummyIdent();\n  };\n\n  lp.parsePropertyAccessor = function() {\n    if (this.tok.type === acorn.tokTypes.name || this.tok.type.keyword) { return this.parseIdent() }\n    if (this.tok.type === acorn.tokTypes.privateId) { return this.parsePrivateIdent() }\n  };\n\n  lp.parseIdent = function() {\n    var name = this.tok.type === acorn.tokTypes.name ? this.tok.value : this.tok.type.keyword;\n    if (!name) { return this.dummyIdent() }\n    if (this.tok.type.keyword) { this.toks.type = acorn.tokTypes.name; }\n    var node = this.startNode();\n    this.next();\n    node.name = name;\n    return this.finishNode(node, \"Identifier\")\n  };\n\n  lp.parsePrivateIdent = function() {\n    var node = this.startNode();\n    node.name = this.tok.value;\n    this.next();\n    return this.finishNode(node, \"PrivateIdentifier\")\n  };\n\n  lp.initFunction = function(node) {\n    node.id = null;\n    node.params = [];\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false;\n      node.expression = false;\n    }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = false; }\n  };\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  lp.toAssignable = function(node, binding) {\n    if (!node || node.type === \"Identifier\" || (node.type === \"MemberExpression\" && !binding)) ; else if (node.type === \"ParenthesizedExpression\") {\n      this.toAssignable(node.expression, binding);\n    } else if (this.options.ecmaVersion < 6) {\n      return this.dummyIdent()\n    } else if (node.type === \"ObjectExpression\") {\n      node.type = \"ObjectPattern\";\n      for (var i = 0, list = node.properties; i < list.length; i += 1)\n        {\n        var prop = list[i];\n\n        this.toAssignable(prop, binding);\n      }\n    } else if (node.type === \"ArrayExpression\") {\n      node.type = \"ArrayPattern\";\n      this.toAssignableList(node.elements, binding);\n    } else if (node.type === \"Property\") {\n      this.toAssignable(node.value, binding);\n    } else if (node.type === \"SpreadElement\") {\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, binding);\n    } else if (node.type === \"AssignmentExpression\") {\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n    } else {\n      return this.dummyIdent()\n    }\n    return node\n  };\n\n  lp.toAssignableList = function(exprList, binding) {\n    for (var i = 0, list = exprList; i < list.length; i += 1)\n      {\n      var expr = list[i];\n\n      this.toAssignable(expr, binding);\n    }\n    return exprList\n  };\n\n  lp.parseFunctionParams = function(params) {\n    params = this.parseExprList(acorn.tokTypes.parenR);\n    return this.toAssignableList(params, true)\n  };\n\n  lp.parseMethod = function(isGenerator, isAsync) {\n    var node = this.startNode(), oldInAsync = this.inAsync, oldInGenerator = this.inGenerator, oldInFunction = this.inFunction;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6)\n      { node.generator = !!isGenerator; }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n    this.inAsync = node.async;\n    this.inGenerator = node.generator;\n    this.inFunction = true;\n    node.params = this.parseFunctionParams();\n    node.body = this.parseBlock();\n    this.toks.adaptDirectivePrologue(node.body.body);\n    this.inAsync = oldInAsync;\n    this.inGenerator = oldInGenerator;\n    this.inFunction = oldInFunction;\n    return this.finishNode(node, \"FunctionExpression\")\n  };\n\n  lp.parseArrowExpression = function(node, params, isAsync) {\n    var oldInAsync = this.inAsync, oldInGenerator = this.inGenerator, oldInFunction = this.inFunction;\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n    this.inAsync = node.async;\n    this.inGenerator = false;\n    this.inFunction = true;\n    node.params = this.toAssignableList(params, true);\n    node.expression = this.tok.type !== acorn.tokTypes.braceL;\n    if (node.expression) {\n      node.body = this.parseMaybeAssign();\n    } else {\n      node.body = this.parseBlock();\n      this.toks.adaptDirectivePrologue(node.body.body);\n    }\n    this.inAsync = oldInAsync;\n    this.inGenerator = oldInGenerator;\n    this.inFunction = oldInFunction;\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  };\n\n  lp.parseExprList = function(close, allowEmpty) {\n    this.pushCx();\n    var indent = this.curIndent, line = this.curLineStart, elts = [];\n    this.next(); // Opening bracket\n    while (!this.closes(close, indent + 1, line)) {\n      if (this.eat(acorn.tokTypes.comma)) {\n        elts.push(allowEmpty ? null : this.dummyIdent());\n        continue\n      }\n      var elt = this.parseMaybeAssign();\n      if (isDummy(elt)) {\n        if (this.closes(close, indent, line)) { break }\n        this.next();\n      } else {\n        elts.push(elt);\n      }\n      this.eat(acorn.tokTypes.comma);\n    }\n    this.popCx();\n    if (!this.eat(close)) {\n      // If there is no closing brace, make the node span to the start\n      // of the next token (this is useful for Tern)\n      this.last.end = this.tok.start;\n      if (this.options.locations) { this.last.loc.end = this.tok.loc.start; }\n    }\n    return elts\n  };\n\n  lp.parseAwait = function() {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary();\n    return this.finishNode(node, \"AwaitExpression\")\n  };\n\n  // Acorn: Loose parser\n  //\n  // This module provides an alternative parser that exposes that same\n  // interface as the main module's `parse` function, but will try to\n  // parse anything as JavaScript, repairing syntax error the best it\n  // can. There are circumstances in which it will raise an error and\n  // give up, but they are very rare. The resulting AST will be a mostly\n  // valid JavaScript AST (as per the [Mozilla parser API][api], except\n  // that:\n  //\n  // - Return outside functions is allowed\n  //\n  // - Label consistency (no conflicts, break only to existing labels)\n  //   is not enforced.\n  //\n  // - Bogus Identifier nodes with a name of `\"\u2716\"` are inserted whenever\n  //   the parser got too confused to return anything meaningful.\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n  //\n  // The expected use for this is to *first* try `acorn.parse`, and only\n  // if that fails switch to the loose parser. The loose parser might\n  // parse badly indented code incorrectly, so **don't** use it as your\n  // default parser.\n  //\n  // Quite a lot of acorn.js is duplicated here. The alternative was to\n  // add a *lot* of extra cruft to that file, making it less readable\n  // and slower. Copying and editing the code allowed me to make\n  // invasive changes and simplifications without creating a complicated\n  // tangle.\n\n\n  acorn.defaultOptions.tabSize = 4;\n\n  function parse(input, options) {\n    return LooseParser.parse(input, options)\n  }\n\n  exports.LooseParser = LooseParser;\n  exports.isDummy = isDummy;\n  exports.parse = parse;\n\n}));\n"],
  "mappings": "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",
  "names": ["global", "factory", "exports", "acorn", "dummyValue", "isDummy", "node", "noop", "LooseParser", "input", "options", "here", "pos", "type", "dummy", "name", "j", "count", "ch", "closeTok", "indent", "line", "blockHeuristic", "p", "f", "plugins", "len", "cls", "i", "lp$2", "isSpace", "e", "msg", "replace", "re", "match", "n", "lp$1", "starttype", "kind", "isBreak", "isAwait", "isLet", "init$1", "init", "blockIndent", "cur", "isCase", "clause", "nextType", "expr", "noIn", "decl", "decl$1", "isStatement", "element", "ref", "ecmaVersion", "locations", "keyName", "isGenerator", "isAsync", "isStatic", "lastValue", "isConstructor", "oldInAsync", "oldInGenerator", "oldInFunction", "fNode", "elt", "elts", "continuedLine", "elt$1", "lp", "start", "val", "left", "node$1", "minPrec", "prec", "rightStart", "sawUnary", "update", "node$2", "node$3", "base", "noCalls", "startIndent", "optionalSupported", "optionalChained", "maybeAsyncArrow", "optional", "exprList", "chainNode", "id", "parenStart", "inner", "params", "par", "meta", "elem", "curElt", "prop", "assign", "key", "binding", "list", "close", "allowEmpty", "parse"]
}
